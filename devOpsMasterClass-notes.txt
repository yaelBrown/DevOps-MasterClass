dev ops notes

dev ops - is a cultural and behavior shift to remove silos

configuration drift 
jenkins and gitlab ci 

username and passwords should never be installed inside the code repository.

ci - act of merging code and testing it as much as possible
cd (delivery) - code in the main branch is deployable to production at any time
  button you are pressing works everytime without fail, whenever you need it. 
  all aspects of the application should be tested. 
cd (deployment) - every change is deployed to the production environment automatically with no human intervention
  enables faster feedback loops, and faster delivery of value
  change is small generally small
  usually not implemented
ci (improvement) - aims to improve software delivery with incremental improvements
  a/b testing is used

Mean time to Change - how long does it take from the inception of a new fix, feature, or other chang to the point when it's delivered to production
deployment frequency - how often code is released to production
deployment lead time - how long does it take from the moment a change is approved for release to the point the change is in production
mean time to recover - time it takes from failure to recovery

A delivery time must introduce at least one change to improve a key metric in every sprint

rauncher (PaaS) - 

devops teacher team - coaching and mentoring should be the primary objectives of a devops specialist

Delivery team autonomy - teams can work minimal external dependencies

kubernetes is a google native google cloud applications
  leading container orchestration platform

rancher - is a container orchestration platform, that puts alot of emphasis in its user interface
  cattle is native engine for rancher
  master host model
  comes with application catalog. 
  service is the smallest deployment unit
  stack is a group of services
  host is a server running the rancher agent
  environment is an isolated unit with its own stacks, services and hosts. 
  single rancher master and host multiple environments

ECS container service is the amazon webservices managed container orchestration platform
  manages a fleet of ec2 virtual machines and runs containers on top of them
    takes care of the complete lifestyle
  ECS has an integrated Docker Hub registry called Elastic Container Registry (ECR)
  Tasks - are defined with JSON files called Task Definitions
  Services - management layer for tasks, defines how many replicas of a task you want to run, provides a routing layer.
  simple task definition can run multiple containers
  ALB (application load balancer)
  some aspects can be difficult to debug and monitor

Pipelines and Automation
  
Jenkins is an automation server
  most widely used automation server
  most documentation available
  often used for ci/ci/cd
  runs jobs when triggrunered by a job
  promotes pipelines as code
  has jenkins files
    jenkins files use Groovy inspired language
    text file with a list of steps is called 'jenkins pipeline'
  run docker inside of docker server is 'not stable'
  Jenkins runs on docker
  executed - is a isolated worker that can run a single jenkins job at a time. 
  Poll SCM (Software Confirguration Management) - within the jenkins application, allows the application to occasionally pull the code pipeline. If changes are detected continues with build. 
    pulls code from code repository


Gitlab is a product for software delivery, code repositories, issue tracking, wiki pages, todo lists, docker registry and CI/CD pipeline automation
  Gitlab CI is the pipeline automation component
  supports pipelines as code, and Docker containers
  keep commercial projects private
  Young and lacking in documentation

Rundeck is a tool for building self service run containers
  running designing and scheduling automation workflows
  used for building self service automation
  can use rundeck to launch a awscli and run automation tasks
  has complicated web interface
  can configure jobs via gui with JSON or YAML

Everything as code - define everything in your application stack as code so your complete cloud infrastucture could be torn down and built from scratch automatically at a touch of a button. 

Ansible - a versatile configuration management tool that aims to be easier and lightweight. 
  Written in python and target host is Python
  serverless and agentless
  Playbooks - are listels of tasks in yaml format
  Roles - are groups of tasks, and managed in playbooks
  Modules and Plugins

Terraform - most popular tool for creating infrastructure as code
  cli utility for infra on cloud providers
  .tf file extension
  can write modules
  ingress (inbound)
  egress (outbound)
  does not provide native functionality for elegant configuration management
    should hand over provisioning to a configuration management tool after the bare infrastructure is running. 

Chef - configuration management tool written in ruby
  configuration files are called recipes and cookbooks written in ruby
  can also do infrastructure as code
  test Kitchen is a powerful testing suite for Chef (kitchen.ci)

Puppet - Another configuration management tool.
  Also uses ruby
  Often used in master/agent model, but can be run as stand-alone locally. 
  provides resource abstraction with Factor
  .pp is puppet declarative language
  classes - chunks of puppet code that can be called in manifests
  modules - are collections of manifests and data such as templates. Nearly everything in Puppet configuration should be stored in modules. 

Additional resources
  Thank you for completing Get into DevOps: The Masterclass.

  Please see additional learning material below, organized by the concepts and tools you've learned about.

  Modern Environment Design
  Ben Butler-Cole's ThoughtWorks blog posts on environment management in the cloud:

  https://www.thoughtworks.com/insights/blog/rethinking-building-cloud-part-2-environments-cloud

  https://www.thoughtworks.com/insights/blog/rethinking-building-cloud-part-3-principles-maximize-environments

  https://www.thoughtworks.com/insights/blog/rethinking-building-cloud-part-4-immutable-servers

  Cloud Platforms
  Amazon Web Services official documentation: https://aws.amazon.com/documentation/

  Google Cloud Platform official documentation: https://cloud.google.com/docs/

  Microsoft Azure official documentation: https://docs.microsoft.com/en-us/azure/

  Openstack official documentation: https://docs.openstack.org/

  Containers & Container Orchestration
  Docker official documentation: https://docs.docker.com/

  Kubernetes official documentation: https://kubernetes.io/docs/home/

  Rancher official documentation: http://rancher.com/docs/rancher/latest/en/

  EC2 Container Service official documentation: https://aws.amazon.com/documentation/ecs/

  Pipelines & Automation
  Jenkins official documentation: https://jenkins.io/doc/

  Gitlab CI official documentation: https://docs.gitlab.com/ce/ci/README.html

  Rundeck official documentation: http://rundeck.org/docs/

  Infrastructure as Code & Configuration Management
  Ansible official documentation: http://docs.ansible.com/ansible/latest/index.html

  Terraform official documentation: https://www.terraform.io/docs/index.html

  Chef official documentation: https://docs.chef.io/

  Puppet official documentation: https://puppet.com/docs/puppet/5.3/index.html